@if (!AuthorizedFor(NKD.Permissions.ManageProjects)) {Html.RenderAction("UnauthorizedRedirect");}
@using (new TransactionScope(TransactionScopeOption.Suppress))
{
    //var modelid = string.Format("{0}",Url.RequestContext.RouteData.Values["id"]);
    //Guid tempg;
    //Guid? modelguid = Guid.TryParse(modelid, out tempg) ? tempg : (Guid?)null;
    
    var d = new NKD.Models.ModelsDataContext();
    Html.DevExpress().GridView(
        settings =>
        {
            settings.Name = "gvDataBindingToLinq";
            settings.CallbackRouteValues = new { area = "NKD", Controller = "User", Action = "ModelParametersPartial" };
            //settings.SettingsEditing.AddNewRowRouteValues = new { area = "NKD", Controller = "User", Action = "InlineEditingAddNewPartial" };
            //settings.SettingsEditing.UpdateRowRouteValues = new { area = "NKD", Controller = "User", Action = "ModelParametersUpdatePartial" };
            //settings.SettingsEditing.DeleteRowRouteValues = new { area = "NKD", Controller = "User", Action = "InlineEditingDeletePartial" };
                
            settings.KeyFieldName = "BlockModelMetadataID";
            settings.Width = Unit.Percentage(100);
            
            settings.Settings.ShowFilterRow = true;
            settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
            settings.Settings.ShowGroupPanel = false;
            settings.Settings.ShowFooter = true;
            settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
            settings.SettingsBehavior.ConfirmDelete = true;


            settings.Columns.Add("BlockModelMetadataID").Visible = false;
            settings.Columns.Add("BlockModelName").Visible = true;
            settings.Columns.Add("ParameterName").Visible = true;
            settings.Columns.Add("ParameterDescription").Visible = true;
            settings.Columns.Add(column =>
            {
                column.FieldName = "StandardUnitName";
                column.Caption = "Unit";
                //column.AutoFilterBy("sss"); //doesn't work
            });
                        
            //settings.Columns.Add("BlockModelID").Visible = false;
            //settings.Columns.Add(column =>
            //{
            //    column.FieldName = "BlockModelName";
            //    column.Caption = "Block Model Name";
            //    column.UnboundType = DevExpress.Data.UnboundColumnType.Object;
            //    column.ColumnType = MVCxGridViewColumnType.TextBox;
            //});
            //settings.CustomUnboundColumnData = (sender, e) =>
            //{
            //    if (e.Column.FieldName == "BlockModelName")
            //    {
            //        var id = (Guid)e.GetListSourceFieldValue("BlockModelID");
            //        e.Value = d.BlockModelMetadatas.FirstOrDefault(x=>x.BlockModelID==id && x.ParameterID == NKD.Helpers.GuidHelper.GUID_ALIAS).BlockModelMetadataText;
            //    }
            //};        
            //settings.Columns.Add(column => {
            //    column.FieldName = "ParameterID";
            //    column.Caption = "Parameter";                
            //    column.ColumnType = MVCxGridViewColumnType.ComboBox;
            //    var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            //    comboBoxProperties.DataSource = d.Parameters;
            //    comboBoxProperties.TextField = "ParameterName";
            //    comboBoxProperties.ValueField = "ParameterID";
            //    comboBoxProperties.ValueType = typeof(Guid);
            //    comboBoxProperties.DropDownStyle = DropDownStyle.DropDownList;
            //});          
            //settings.Columns.Add("BlockModelMetadataText");          
            //settings.CommandColumn.Visible = true;
            ////settings.CommandColumn.NewButton.Visible = true;
            ////settings.CommandColumn.DeleteButton.Visible = true;
            //settings.CommandColumn.EditButton.Visible = true;
            
            ////settings.Columns.Add(column => {
            ////    column.FieldName = "Sent";
            ////    column.ColumnType = MVCxGridViewColumnType.DateEdit;
            ////    column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            ////});
            ////settings.Columns.Add("Size").Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            ////settings.Columns.Add("HasAttachment", "Attachment?", MVCxGridViewColumnType.CheckBox);

            ////settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Size");
            ////settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "Subject");
            ////settings.GroupSummary.Add(DevExpress.Data.SummaryItemType.Count, "");

            settings.Columns.Add(column =>
            {
                column.Caption = "#";
                column.SetDataItemTemplateContent(c =>
                {
                    ViewContext.Writer.Write(
                        Html.ActionLink("Edit", "ModelParametersEdit", new { id = DataBinder.Eval(c.DataItem, "BlockModelMetadataID") }) + "&nbsp;" 
                        //+ Html.ActionLink("Delete", "ModelParametersDelete", new { id = DataBinder.Eval(c.DataItem, "BlockModelMetadataID") }, new { onclick = "return confirm('Do you really want to delete this record?')" })                        
                    );
                });
                //column.SetHeaderTemplateContent(c =>
                //{
                //    ViewContext.Writer.Write(
                //        Html.ActionLink("New", "ModelParametersEdit", new { BlockModelMetadataID = "" }).ToHtmlString()
                //    );
                //});
                column.Settings.AllowDragDrop = DefaultBoolean.False;
                column.Settings.AllowSort = DefaultBoolean.False;
                column.Width = 70;
            });

            settings.PreRender = (s, e) =>
            {
                ASPxGridView grid = (ASPxGridView)s;
                grid.FilterExpression = "[StandardUnitName] IS NULL"; //"[Unit] IS NULL or [Unit] == '' or [Unit] == ' '"; //"IsNull([Unit])";
            };
            
            //settings.ClientSideEvents.Init = "function(s, e) { s.PerformCallback(); }";
            settings.ClientSideEvents.BeginCallback = "function(s, e) { OnStartCallback(s, e); }";
            settings.ClientSideEvents.EndCallback = "function(s, e) { OnEndCallback(s, e); }";

        })
        //.Bind(Model.Projects)
        .BindToLINQ(string.Empty, string.Empty, (s, e) =>
        {
            
            e.QueryableSource = (from g in
                                     (from mod in d.BlockModelMetadatas.Where(mod => mod.IsColumnData == true)
                                      from a in d.BlockModels.Where(a => a.BlockModelID == mod.BlockModelID && a.VersionDeletedBy == null)
                                      from ms in d.ModelStatus.Where(ms => ms.BlockModelID == a.BlockModelID)
                                        from p in d.Parameters.Where(p=> mod.ParameterID == p.ParameterID)
                                        from u in d.Units.Where(u => u.UnitID == p.UnitID).DefaultIfEmpty()
                                        select new { mod.BlockModelMetadataID, p.ParameterName, ParameterDescription = p.Description, u.StandardUnitName, BlockModelName = a.Alias })
                                    .GroupBy(x => x.BlockModelMetadataID, (x, y) => new { Key = x, Value = y.FirstOrDefault() })
                                select new { g.Value.BlockModelMetadataID , g.Value.ParameterName, g.Value.ParameterDescription, g.Value.StandardUnitName, g.Value.BlockModelName});
            e.KeyExpression = "BlockModelMetadataID";
            
        })
        .GetHtml();
}
